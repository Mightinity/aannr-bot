import discord, os
import subprocess
from dotenv import load_dotenv
from discord import app_commands
from discord.ext import commands
import psutil

load_dotenv()

class ServerInfo(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        
    @app_commands.command(
        name="serverinfo",
        description="Display information about the server used by team Beliauini Assist",)
    
    async def serverinfo(self, interaction: discord.Interaction) -> None:
        def get_uptime():
          with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
            uptimeInfo = ''
            uptime_days = int(uptime_seconds / 86400)
            uptime_seconds -= uptime_days * 86400
            uptime_hours = int(uptime_seconds / 3600)
            uptime_seconds -= uptime_hours * 3600
            uptime_minutes = int(uptime_seconds / 60)
            uptime_seconds -= uptime_minutes * 60
            if uptime_days > 0:
                uptimeInfo += '{} day(s) '.format(uptime_days)
            if uptime_hours > 0:
                uptimeInfo += '{} hour(s) '.format(uptime_hours)
            if uptime_minutes > 0:
                uptimeInfo += '{} minute(s) '.format(uptime_minutes)
            uptimeInfo += '{:.2f} second(s)'.format(uptime_seconds)
            return uptimeInfo
        def get_cpu_info():
            
            cpu_info = {'name': 'unknown', 'cores': 0, 'threads': 0}
            with open('/proc/cpuinfo', 'r') as f:
                for line in f:
                    if line.startswith('model name'):
                        cpu_info['name'] = line.split(':')[1].strip()
                    elif line.startswith('processor'):
                        cpu_info['cores'] += 1
                    elif line.startswith('siblings'):
                        cpu_info['threads'] = int(line.split(':')[1].strip())
            return cpu_info
        
        def get_mem_info():
            mem_info = {
                'total' : 0,
                'free': 0,
                'cache': 0,
            }
            with open('/proc/meminfo', 'r') as f:
                for line in f:
                    if line.startswith("MemTotal"):
                        mem_info['total'] = int(line.split(":")[1].strip().replace(" kB", ""))
                    elif line.startswith("Cached"):
                        mem_info['cache'] = int(line.split(":")[1].strip().replace(" kB", ""))
                    elif line.startswith("MemFree"):
                        mem_info['free'] = int(line.split(":")[1].strip().replace(" kB", ""))
            
            return mem_info
        
        value_kb = 1048576
        
        cpu_info = get_cpu_info()
        cpu_usage = psutil.cpu_percent()
        total_memory = round(get_mem_info()['total'] / value_kb, 2)
        cache_memory = round(get_mem_info()['cache'] / value_kb, 2)
        free_memory = round(get_mem_info()['free'] / value_kb, 2)
        used_memory = round(total_memory - (cache_memory + free_memory), 2)
        memory_percent = round(((used_memory + cache_memory) / total_memory) * 100, 1)
        
        await interaction.response.send_message(f"""```SERVER INFORMATION\nInformation about the server used by team b3liau1ni
        \n============ CPU Information ============
- CPU Name  : {cpu_info['name'].replace("U       M", "U  M")}
- CPU Core  : {cpu_info['cores']}
- CPU Threads: {cpu_info['threads']}
- CPU Usage : {cpu_usage}%
        \n============ Memory Information ============
- Memory total : {total_memory} GB
- Used         : {used_memory} GB
- Cache        : {cache_memory} GB
- Free         : {free_memory} GB
- Percent used : {memory_percent} %
- Uptime Server: {get_uptime()}```""")

async def setup(bot: commands.Bot) -> None:
    await bot.add_cog(
        ServerInfo(bot),
        guilds=[discord.Object(id = os.getenv("GUILD_ID"))])
